{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Daaaaaaaaan/sei/continuing-ed/ps-pkellner-using-react-hooks/section-2/src/ImageToggleOnScroll.js\";\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null); // console.log('imageRef is: ', imageRef)\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n\n  useEffect(() => {\n    setInView(isInView);\n    window.addEventListener('scroll', scrollHandler);\n    return () => {\n      window.removeEventListener('scroll', scrollHandler);\n    };\n  }, []);\n\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/Daaaaaaaaan/sei/continuing-ed/ps-pkellner-using-react-hooks/section-2/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","inView","setInView","isInView","rect","current","getBoundingClientRect","top","bottom","window","innerHeight","addEventListener","scrollHandler","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAE1D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB,CAF0D,CAG1D;;AAEA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC,KAAD,CAApC;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACnB,UAAMC,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,qBAAjB,EAAb;AACA,WAAOF,IAAI,CAACG,GAAL,IAAY,CAAZ,IAAiBH,IAAI,CAACI,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACH,GAHD;;AAKAf,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS,CAACC,QAAD,CAAT;AACAM,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACTH,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACH,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMA,aAAa,GAAG,MAAM;AACxBV,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACH,GAFD;;AAIA,sBACI;AACA,IAAA,GAAG,EAAEF,MAAM,GAAEF,YAAF,GAAiBD,UAD5B;AAEA,IAAA,GAAG,EAAC,EAFJ;AAGA,IAAA,GAAG,EAAEE;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA9BD;;AAgCA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\n\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\n\n    const imageRef = useRef(null)\n    // console.log('imageRef is: ', imageRef)\n\n    const [inView, setInView] = useState(false)\n    const isInView = () => {\n        const rect = imageRef.current.getBoundingClientRect()\n        return rect.top >= 0 && rect.bottom <= window.innerHeight\n    }\n\n    useEffect(() => {\n        setInView(isInView)\n        window.addEventListener('scroll', scrollHandler)\n        return () => {\n            window.removeEventListener('scroll', scrollHandler)\n        }\n    }, [])\n\n    const scrollHandler = () => {\n        setInView(isInView())\n    }\n\n    return (\n        <img\n        src={inView? secondaryImg : primaryImg}\n        alt=''\n        ref={imageRef}\n        />\n    )\n}\n\nexport default ImageToggleOnScroll"]},"metadata":{},"sourceType":"module"}